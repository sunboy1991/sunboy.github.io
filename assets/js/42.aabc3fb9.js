(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{457:function(e,n,t){"use strict";t.r(n);var r=t(27),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"electron-入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#electron-入门"}},[e._v("#")]),e._v(" Electron 入门")]),e._v(" "),t("p",[e._v("使用 Electron 创建的应用其实就是一个在内嵌的 Chromium 浏览器中打开的 Web 网站。除了常规的 HTML5 API，(这些网站)还可以使用任意的 Node.js 模块和一些 Electron 特有的模块来访问操作系统。")]),e._v(" "),t("p",[e._v("在整个教程中，我们将创建一个简单的应用：它能够通过 RSS 获取到 Tutorialzine 上最近的文章，并通过一个看起来很酷的轮播效果来展示它们。所有需要的文件已经打包好，**"),t("a",{attrs:{href:"http://demo.tutorialzine.com/2015/12/creating-your-first-desktop-app-with-html-js-and-electron/creating-your-first-desktop-app-with-electron.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("点击这里"),t("OutboundLink")],1),e._v("**下载。")]),e._v(" "),t("p",[e._v("把它解压到你想要的地方。从项目结构上看，你一定猜不到这不仅仅是一个简单的网站，而且是一个桌面应用程序。")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://cdn.tutorialzine.com/wp-content/uploads/2015/12/electron-app-tree.png",alt:"项目结构"}})]),e._v(" "),t("p",[e._v("项目结构")]),e._v(" "),t("p",[e._v("我们一会儿会更仔细的看看这些有趣的文件，了解它们的原理。不过在此之前，先让我们把应用跑起来吧。")]),e._v(" "),t("h3",{attrs:{id:"运行应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行应用"}},[e._v("#")]),e._v(" 运行应用")]),e._v(" "),t("p",[e._v("由于 Electron 是一个优秀的 Node.js 应用，所以你必须安装 "),t("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("npm"),t("OutboundLink")],1),e._v("。 你可以轻松的在"),t("a",{attrs:{href:"http://blog.npmjs.org/post/85484771375/how-to-install-npm",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),t("OutboundLink")],1),e._v("学习到如何安装它。")]),e._v(" "),t("p",[e._v("完成之后，在项目目录下打开 cmd 或者终端，运行下面的命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install\n")])])]),t("p",[e._v("它将会创建 "),t("strong",[e._v("node_modules")]),e._v(" 文件夹来存放这个应用运行所需的所有 Node.js 依赖。 一切都没问题的话在同一个终端下输入下面的命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm start\n")])])]),t("p",[e._v("你所创建的应用应该会在一个独立的窗口中打开。可以注意到它有一个顶部菜单栏和其他的一些部分！")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://cdn.tutorialzine.com/wp-content/uploads/2015/12/electron_app_1.png",alt:"Electron App In Action"}})]),e._v(" "),t("p",[e._v("Electron 实战")]),e._v(" "),t("p",[e._v("你可能注意到打开这个应用的方式对用户并不友好。但这仅仅是开发者打开它的方式，当它面向公众被打包好之后, 就可以像一般的应用一样安装，并通过双击图标来打开它。")]),e._v(" "),t("h3",{attrs:{id:"如何工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何工作"}},[e._v("#")]),e._v(" 如何工作")]),e._v(" "),t("p",[e._v("在这部分，我们将讨论所有 Electron 应用中最重要的一些文件。首先是 package.json，它包含有关项目的各种信息，比如版本、npm 依赖和其他重要设置。")]),e._v(" "),t("h4",{attrs:{id:"package-json"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#package-json"}},[e._v("#")]),e._v(" package.json")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  "name": "electron-app",\n  "version": "1.0.0",\n  "description": "",\n  "main": "main.js",\n  "dependencies": {\n    "pretty-bytes": "^2.0.1"\n  },\n  "devDependencies": {\n    "electron-prebuilt": "^0.35.2"\n  },\n  "scripts": {\n    "start": "electron main.js"\n  },\n  "author": "",\n  "license": "ISC"\n}\n')])])]),t("p",[e._v("如果以前用过 node.js，那么你已经知道它是如何工作的了。最重要的是注意这里的 "),t("strong",[e._v("scripts")]),e._v(" 属性，它定义了 "),t("code",[e._v("npm start")]),e._v(" 命令，这条命令能够让我们像之前那样运行应用。当我们执行这条命令时，我们其实是在要求 electron 去运行 "),t("strong",[e._v("main.js")]),e._v(" 这个文件。这个 JS 文件包括一些简短的脚本：打开应用的窗口、定义一些设置和一些事件的处理。")]),e._v(" "),t("h4",{attrs:{id:"main-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-js"}},[e._v("#")]),e._v(" main.js")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var app = require('app');  // 控制应用生命周期的模块。\nvar BrowserWindow = require('browser-window');  // 创建原生浏览器窗口的模块\n\n// 保持一个对于 window 对象的全局引用，不然，当 JavaScript 被 \"垃圾回收机制\" 回收，\n// 窗口会被自动地关闭\nvar mainWindow = null;\n\n// 当所有窗口被关闭了，退出。\napp.on('window-all-closed', function() {\n  // 在 OS X 上，通常用户在明确地按下 Cmd + Q 之前\n  // 应用会保持活动状态\n  if (process.platform != 'darwin') {\n    app.quit();\n  }\n});\n\n// 当 Electron 完成了初始化并且准备创建浏览器窗口的时候\n// 这个方法就被调用\napp.on('ready', function() {\n  // 创建浏览器窗口。\n  mainWindow = new BrowserWindow({width: 900, height: 600});\n\n  // 加载应用的 index.html\n  mainWindow.loadURL('file://' + __dirname + '/index.html');\n\n\n  // 当 window 被关闭，这个事件会被发出\n  mainWindow.on('closed', function() {\n    // 取消引用 window 对象，如果你的应用支持多窗口的话，\n    // 通常会把多个 window 对象存放在一个数组里面，\n    // 但这次不是。\n    mainWindow = null;\n  });\n});\n")])])]),t("p",[e._v("观察一下我们在“ready”方法中做的事情。首先我们定义一个浏览器窗口并给它了初始化的大小，然后我们在它里面载入了  "),t("strong",[e._v("index.html")]),e._v(" 这个文件，效果和你在浏览器里打开它差不多。")]),e._v(" "),t("p",[e._v("正如你所看到的，这个 HTML 文件没有什么特别的 – 一个图片轮播和一段显示 CPU 和 RAM 统计数据的文字被包含在容器之中。")]),e._v(" "),t("h4",{attrs:{id:"index-html"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#index-html"}},[e._v("#")]),e._v(" index.html")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\n\n    <meta charset="utf-8">\n    <meta content="width=device-width, initial-scale=1">\n\n    <title>Tutorialzine Electron Experiment</title>\n\n    <link rel="stylesheet" href="./css/jquery.flipster.min.css">\n    <link rel="stylesheet" href="./css/styles.css">\n\n\x3c!-- 在 Electron中，应该这样引入 jQuery --\x3e\n<script>window.$ = window.jQuery = require(\'./js/jquery.min.js\');<\/script>\n\n')])])]),t("p",[e._v("这个 HTML 文件同样也引入了所需的 CSS 文件、JS库和其它的脚本。注意，jQuery 需要以一种奇怪的方式引入。更多相关信息可以参考"),t("a",{attrs:{href:"http://stackoverflow.com/questions/32621988/electron-jquery-is-not-defined",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("最后，这是这个应用实际的 Javascript 文件。在这里面，我们访问 Tutorialzine 的 RSS 源，获取最新的文章并把它们显示出来。直接在浏览器中这样做是没有效果的，因为从不同的域名获取 RSS 订阅是被禁止的（参见"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("同源策略"),t("OutboundLink")],1),e._v("）。但在 Electron 中并没有这个限制，我们可以通过 AJAX 请求轻松的获取到我们想要的信息。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$(function(){\n\n    // 显示有关该计算机的一些统计数据，使用的是 node 的 os 模块。\n\n    var os = require('os');\n    var prettyBytes = require('pretty-bytes');\n\n    $('.stats').append('Number of cpu cores: ' + os.cpus().length + '');\n    $('.stats').append('Free memory: ' + prettyBytes(os.freemem())+ '');\n\n    // Electron 的 UI 库。我们在之后会用到它。\n\n    var shell = require('shell');\n\n    // 从 Tutorialzine 上获取最近的文章。\n\n    var ul = $('.flipster ul');\n\n    // Electron 并没有采用同源安全策略, 所以我们能够\n    // 发送 ajax 请求给其它网站。让我们获取 Tutorialzine 的 RSS 订阅：\n\n    $.get('http://feeds.feedburner.com/Tutorialzine', function(response){\n\n        var rss = $(response);\n\n        // 在 RSS 订阅中找到所有的文章：\n\n        rss.find('item').each(function(){\n            var item = $(this);\n\n            var content = item.find('encoded').html().split('')[0]+'';\n            var urlRegex = /(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#])?/g;\n\n            // 获取文章的第一幅图。\n            var imageSource = content.match(urlRegex)[1];\n\n            // 为每一篇文章创建一个 li 元素，并把它追加到 ul 中。\n            var li = $('*   <a target=\"_blank\"></a>');\n\n            li.find('a')\n                .attr('href', item.find('link').text())\n                .text(item.find(\"title\").text());\n\n            li.find('img').attr('src', imageSource);\n\n            li.appendTo(ul);\n\n        });\n\n        // 初始化 flipster 插件。\n\n        $('.flipster').flipster({\n            style: 'carousel'\n        });\n\n        // 当一篇文章被点击时，用系统默认的浏览器打开它，\n        // 否则的话会用 electron 的窗口打开它，这不是我们想要的结果。\n\n        $('.flipster').on('click', 'a', function (e) {\n\n            e.preventDefault();\n\n            // 使用系统默认的浏览器打开 URL。\n\n            shell.openExternal(e.target.href);\n\n        });\n\n    });\n\n});\n")])])]),t("p",[e._v("上面的代码里有一件很酷的事情，在一个文件中我们同时使用了：")]),e._v(" "),t("ul",[t("li",[e._v("JavaScript 库 – 使用 jQuery 和 "),t("a",{attrs:{href:"https://github.com/drien/jquery-flipster",target:"_blank",rel:"noopener noreferrer"}},[e._v("jQuery Flipster"),t("OutboundLink")],1),e._v(" 来实现图片轮播。")]),e._v(" "),t("li",[e._v("Electron 原生模块 – Shell 提供了一些桌面任务相关的 API，在这里我们通过它使用了系统默认的浏览器打开 URL。")]),e._v(" "),t("li",[e._v("Node.js 模块 – 使用 "),t("a",{attrs:{href:"https://nodejs.org/api/os.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("OS"),t("OutboundLink")],1),e._v(" 来获取系统的内存信息，使用 "),t("a",{attrs:{href:"https://www.npmjs.com/package/pretty-bytes",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pretty Bytes"),t("OutboundLink")],1),e._v(" 格式化它们。")])]),e._v(" "),t("p",[e._v("就这样我们的应用已经准备好了！")]),e._v(" "),t("h3",{attrs:{id:"打包和发布"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打包和发布"}},[e._v("#")]),e._v(" 打包和发布")]),e._v(" "),t("p",[e._v("还有一件重要的事情：让你的应用准备好面对最终的用户。你需要把它打包成一个在用户电脑上双击就可以使用的可执行文件。由于 Electron 应用能够在多个操作系统上运行，每个操作系统又各不相同，所以需要为 Windows、Linux和 OS X 分别打包。使用像这个 npm 模块一样的工具可以很好的帮助你开始 – "),t("a",{attrs:{href:"https://github.com/maxogden/electron-packager",target:"_blank",rel:"noopener noreferrer"}},[e._v("Electron Packager"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("考虑到要将所有的资源文件、所有需要的 npm 模块、以及一个迷你的 WebKit 浏览器打包进一个可执行文件，所有的这些打包完后（的大小约）有 50MB。对于像这样一个简单的应用来说这是相当大的了，是不现实的。但当我们创建更大、更复杂的应用时，这个问题就变的无关紧要了。")]),e._v(" "),t("h3",{attrs:{id:"结论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[e._v("#")]),e._v(" 结论")]),e._v(" "),t("p",[e._v("通过我们的例子，你可以看到 NW.js 与 Electron 最主要的不同是：NW.js 直接打开了一个 HTML页面；而 Electron 是通过 JavaScript 文件启动并通过代码来创建应用程序窗口。 Electron 的方式给了你更多控制的权利，你能够轻松地创建多窗口应用程序并组织它们之间的通信。")]),e._v(" "),t("p",[e._v("总而言之 Electron 是一种非常令人激动的通过 Web 技术来创建桌面应用的方式。这是你接下来可能需要阅读的内容：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/atom/electron/blob/master/docs-translations/zh-CN/tutorial/quick-start.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Electron 快速入门"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/atom/electron/tree/master/docs-translations/zh-CN",target:"_blank",rel:"noopener noreferrer"}},[e._v("Electron 文档"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://electron.atom.io/#built-on-electron",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 Electron 创建的应用"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=a.exports}}]);