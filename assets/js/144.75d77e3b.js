(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{442:function(t,s,a){"use strict";a.r(s);var n=a(27),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"glsl语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#glsl语言"}},[t._v("#")]),t._v(" GLSL语言")]),t._v(" "),a("p",[t._v("GLSL是一门底层的静态语言，通过js调用浏览器编译接口编译之后，在显卡内执行，它的主要职能是告知显卡如何对像素着色。")]),t._v(" "),a("h2",{attrs:{id:"基本类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("void")])]),t._v(" "),a("td",[t._v("空类型,即不返回任何值")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("bool")])]),t._v(" "),a("td",[t._v("布尔类型 true,false")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("int")])]),t._v(" "),a("td",[t._v("带符号的整数 signed integer")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("float")])]),t._v(" "),a("td",[t._v("带符号的浮点数 floating scalar")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("vec2, vec3, vec4")])]),t._v(" "),a("td",[t._v("n维浮点数向量 n-component floating point vector")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("bvec2, bvec3, bvec4")])]),t._v(" "),a("td",[t._v("n维布尔向量 Boolean vector")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("ivec2, ivec3, ivec4")])]),t._v(" "),a("td",[t._v("n维整数向量 signed integer vector")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("mat2, mat3, mat4")])]),t._v(" "),a("td",[t._v("2x2, 3x3, 4x4 浮点数矩阵 float matrix")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("sampler2D")])]),t._v(" "),a("td",[t._v("2D纹理 a 2D texture")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("samplerCube")])]),t._v(" "),a("td",[t._v("盒纹理 cube mapped texture")])])])]),t._v(" "),a("h2",{attrs:{id:"基本结构和数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本结构和数组"}},[t._v("#")]),t._v(" 基本结构和数组:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("结构")]),t._v(" "),a("td",[t._v("struct type-name{} 类似c语言中的 结构体")])]),t._v(" "),a("tr",[a("td",[t._v("数组")]),t._v(" "),a("td",[t._v("float foo[3] glsl只支持1维数组,数组可以是结构体的成员")])])])]),t._v(" "),a("h2",{attrs:{id:"向量的分量访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向量的分量访问"}},[t._v("#")]),t._v(" 向量的分量访问:")]),t._v(" "),a("p",[t._v("glsl中的向量(vec2,vec3,vec4)往往有特殊的含义,比如可能代表了一个空间坐标(x,y,z,w),或者代表了一个颜色(r,g,b,a),再或者代表一个纹理坐标(s,t,p,q)\n所以glsl提供了一些更人性化的分量访问方式.")]),t._v(" "),a("p",[a("code",[t._v("vector.xyzw")]),t._v("  其中xyzw 可以任意组合")]),t._v(" "),a("p",[a("code",[t._v("vector.rgba")]),t._v("  其中rgba 可以任意组合")]),t._v(" "),a("p",[a("code",[t._v("vector.stpq")]),t._v("  其中stpq 可以任意组合")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec4 v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" x1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" x2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1.0")]),t._v("\n\nvec3 xyz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xyz"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//vec3(1.0,2.0,3.0)")]),t._v("\nvec3 xyz1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//vec3(1.0,2.0,3.0)")]),t._v("\nvec3 rgb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rgb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//vec3(1.0,2.0,3.0)")]),t._v("\n\nvec2 xyzw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xyzw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//vec4(1.0,2.0,3.0,1.0);")]),t._v("\nvec2 rgba "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rgba"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//vec4(1.0,2.0,3.0,1.0);")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("优先级(越小越高)")]),t._v(" "),a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("结合性")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[a("strong",[t._v("()")])]),t._v(" "),a("td",[t._v("聚组:a*(b+c)")]),t._v(" "),a("td",[t._v("N/A")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[a("strong",[t._v("[] () . ++ --")])]),t._v(" "),a("td",[t._v("数组下标__[]"),a("strong",[t._v(",方法参数__fun(arg1,arg2,arg3)")]),t._v(",属性访问__a.b__,自增/减后缀__a++  a--__")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[a("strong",[t._v("++ -- + - !")])]),t._v(" "),a("td",[t._v("自增/减前缀__++a  --a__,正负号(一般正号不写)"),a("strong",[t._v("a ,-a")]),t._v(",取反__!false__")]),t._v(" "),a("td",[t._v("R - L")])]),t._v(" "),a("tr",[a("td",[t._v("4")]),t._v(" "),a("td",[a("strong",[t._v("* /")])]),t._v(" "),a("td",[t._v("乘除数学运算")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("5")]),t._v(" "),a("td",[a("strong",[t._v("+ -")])]),t._v(" "),a("td",[t._v("加减数学运算")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("7")]),t._v(" "),a("td",[a("strong",[t._v("< > <= >=")])]),t._v(" "),a("td",[t._v("关系运算符")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("8")]),t._v(" "),a("td",[a("strong",[t._v("== !=")])]),t._v(" "),a("td",[t._v("相等性运算符")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[a("strong",[t._v("&&")])]),t._v(" "),a("td",[t._v("逻辑与")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("13")]),t._v(" "),a("td",[a("strong",[t._v("^^")])]),t._v(" "),a("td",[t._v("逻辑排他或(用处基本等于!=)")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("14")]),t._v(" "),a("td",[a("strong",[t._v("||")])]),t._v(" "),a("td",[t._v("逻辑或")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("15")]),t._v(" "),a("td",[a("strong",[t._v("? :")])]),t._v(" "),a("td",[t._v("三目运算符")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("16")]),t._v(" "),a("td",[a("strong",[t._v("= += -= *= /=")])]),t._v(" "),a("td",[t._v("赋值与复合赋值")]),t._v(" "),a("td",[t._v("L - R")])]),t._v(" "),a("tr",[a("td",[t._v("17")]),t._v(" "),a("td",[a("strong",[t._v(",")])]),t._v(" "),a("td",[t._v("顺序分配运算")]),t._v(" "),a("td",[t._v("L - R")])])])]),t._v(" "),a("p",[a("em",[t._v("ps 左值与右值:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("左值:表示一个储存位置,可以是变量,也可以是表达式,但表达式最后的结果必须是一个储存位置.\n\n右值:表示一个值, 可以是一个变量或者表达式再或者纯粹的值.\n\n操作符的优先级：决定含有多个操作符的表达式的求值顺序，每个操作的优先级不同.\n\n操作符的结合性：决定相同优先级的操作符是从左到右计算，还是从右到左计算。\n")])])]),a("h2",{attrs:{id:"基础类型间的运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础类型间的运算"}},[t._v("#")]),t._v(" 基础类型间的运算:")]),t._v(" "),a("p",[t._v("glsl中,没有隐式类型转换,原则上glsl要求任何表达式左右两侧(l-value),(r-value)的类型必须一致 也就是说以下表达式都是错误的:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//错误,r-value为float 而 lvalue 为int.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nvec3 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("下面来分别说说可能遇到的情况:")])]),t._v(" "),a("p",[a("strong",[t._v("1."),a("code",[t._v("float")]),t._v(" 与 "),a("code",[t._v("int")]),t._v(":")])]),t._v(" "),a("p",[t._v("float与float , int与int之间是可以直接运算的,但float与int不行.它们需要进行一次显示转换.即要么把float转成int: "),a("strong",[t._v("int(1.0)")]),t._v("\n,要么把int转成float: "),a("strong",[t._v("float(1)")]),t._v(" ,以下表达式都是正确的:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("int a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfloat a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nint a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfloat a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("2."),a("code",[t._v("float")]),t._v("  与 "),a("code",[t._v("vec(向量)")]),t._v(" "),a("code",[t._v("mat(矩阵)")]),t._v(":")])]),t._v(" "),a("p",[t._v("vec,mat这些类型其实是由float复合而成的,当它们与float运算时,其实就是在每一个分量上分别与float进行运算,这就是所谓的"),a("code",[t._v("逐分量")]),t._v("运算.glsl里\n大部分涉及vec,mat的运算都是"),a("code",[t._v("逐分量")]),t._v("运算,但也并不全是. 下文中就会讲到特例.")]),t._v(" "),a("p",[a("code",[t._v("逐分量")]),t._v("运算是线性的,这就是说 vec 与 float 的运算结果是还是 vec.")]),t._v(" "),a("p",[t._v("int 与 vec,mat之间是不可运算的, 因为vec和mat中的每一个分量都是 float 类型的. 无法与int进行逐分量计算.")]),t._v(" "),a("p",[t._v("下面枚举了几种 float 与 vec,mat 运算的情况")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec3 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat3 m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mat3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec3 b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vec3(10.0, 20.0, 30.0)")]),t._v("\nvec3 c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vec3(10.0, 20.0, 30.0)")]),t._v("\nmat3 m2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// = mat3(10.0)")]),t._v("\nmat3 m3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// = mat3(10.0)")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("3. "),a("code",[t._v("vec(向量)")]),t._v(" 与 "),a("code",[t._v("vec(向量)")]),t._v(":")])]),t._v(" "),a("p",[t._v("两向量间的运算首先要保证操作数的阶数都相同.否则不能计算.例如: vec3*vec2 vec4+vec3 等等都是不行的.")]),t._v(" "),a("p",[t._v("它们的计算方式是两操作数在同位置上的分量分别进行运算,其本质还是逐分量进行的,这和上面所说的float类型的\n逐分量运算可能有一点点差异,相同的是 vec 与 vec 运算结果还是 vec, 且阶数不变.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec3 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec3 b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec3 c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// = vec3(1.1, 2.2, 3.3)")]),t._v("\nvec3 d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// = vec3(0.1, 0.4, 0.9)")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"http://wshxbqq-wshxbqq.stor.sinaapp.com/2016-08-08_16-15-35_329___2.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("3. "),a("code",[t._v("vec(向量)")]),t._v(" 与 "),a("code",[t._v("mat(矩阵)")]),t._v(":")])]),t._v(" "),a("p",[t._v("要保证操作数的阶数相同,且vec与mat间只存在乘法运算.")]),t._v(" "),a("p",[t._v("它们的计算方式和线性代数中的矩阵乘法相同,不是逐分量运算.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec2 v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat2 m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mat2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec2 w "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// = vec2(1. * 10. + 3. * 20., 2. * 10. + 4. * 20.)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\nvec2 v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat2 m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mat2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec2 w "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// = vec2(1. * 10. + 2. * 20., 3. * 10. + 4. * 20.)")]),t._v("\n\n\n")])])]),a("p",[t._v("向量与矩阵的乘法规则如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://wshxbqq-wshxbqq.stor.sinaapp.com/2016-08-08_16-15-36_966___3.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://wshxbqq-wshxbqq.stor.sinaapp.com/2016-08-08_16-15-36_284___4.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("4. "),a("code",[t._v("mat(矩阵)")]),t._v(" 与 "),a("code",[t._v("mat(矩阵)")]),t._v(":")])]),t._v(" "),a("p",[t._v("要保证操作数的阶数相同.")]),t._v(" "),a("p",[t._v("在mat与mat的运算中, 除了乘法是线性代数中的矩阵乘法外.其余的运算任为逐分量运算.简单说就是只有乘法是特殊的,其余都和vec与vec运算类似.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("mat2 a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mat2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat2 b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mat2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmat2 c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//mat2(1.*10.+3.*20.,2.*10.+4.*20.,1.* 30.+3.*40.,2.* 30.+4.*40.);")]),t._v("\n\nmat2 d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//mat2(1.+10.,2.+20.,3.+30.,4.+40);")]),t._v("\n\n")])])]),a("p",[t._v("矩阵乘法规则如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://wshxbqq-wshxbqq.stor.sinaapp.com/2016-08-08_16-15-36_985___5.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"变量限定符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量限定符"}},[t._v("#")]),t._v(" 变量限定符:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("修饰符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("none")])]),t._v(" "),a("td",[t._v("(默认的可省略)本地变量,可读可写,函数的输入参数既是这种类型")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("const")])]),t._v(" "),a("td",[t._v("声明变量或函数的参数为只读类型")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("attribute")])]),t._v(" "),a("td",[t._v("只能存在于vertex shader中,一般用于保存顶点或法线数据,它可以在数据缓冲区中读取数据")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("uniform")])]),t._v(" "),a("td",[t._v("在运行时shader无法改变uniform变量, 一般用来放置程序传递给shader的变换矩阵，材质，光照参数等等.")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("varying")])]),t._v(" "),a("td",[t._v("主要负责在vertex 和 fragment 之间传递变量")])])])]),t._v(" "),a("p",[a("strong",[t._v("const")]),t._v(":")]),t._v(" "),a("p",[t._v("和C语言类似,被const限定符修饰的变量初始化后不可变,除了局部变量,函数参数也可以使用const修饰符.但要注意的是结构变量可以用const修饰,\n但结构中的字段不行.")]),t._v(" "),a("p",[t._v("const变量必须在声明时就初始化 "),a("code",[t._v("const vec3 v3 = vec3(0.,0.,0.)")])]),t._v(" "),a("p",[t._v("局部变量只能使用const限定符.")]),t._v(" "),a("p",[t._v("函数参数只能使用const限定符.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("light")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        vec4 color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        vec3 pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//const vec3 pos1; //结构中的字段不可用const修饰会报错.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" light lgt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("light")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结构变量可以用const修饰")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("attribute")]),t._v(":")]),t._v(" "),a("p",[t._v("attribute变量是"),a("code",[t._v("全局")]),t._v("且"),a("code",[t._v("只读")]),t._v("的,它只能在vertex shader中使用,只能与浮点数,向量或矩阵变量组合,\n一般attribute变量用来放置程序传递来的模型顶点,法线,颜色,纹理等数据它可以访问数据缓冲区\n(还记得__gl.vertexAttribPointer__这个函数吧)")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("attribute vec4 a_Position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("uniform")]),t._v(":")]),t._v(" "),a("p",[t._v("uniform变量是"),a("code",[t._v("全局")]),t._v("且"),a("code",[t._v("只读")]),t._v("的,在整个shader执行完毕前其值不会改变,他可以和任意基本类型变量组合,\n一般我们使用uniform变量来放置外部程序传递来的环境数据(如点光源位置,模型的变换矩阵等等)\n这些数据在运行中显然是不需要被改变的.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("uniform vec4 lightPosition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("varying")]),t._v(":")]),t._v(" "),a("p",[t._v("varying类型变量是 vertex shader 与 fragment shader 之间的信使,一般我们在 vertex shader 中修改它然后在fragment shader使用它,但不能在\nfragment shader中修改它.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//顶点着色器")]),t._v("\nvarying vec4 v_Color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    v_Color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//片元着色器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\nvarying vec4 v_Color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  gl_FragColor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v_Color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])])]),a("p",[t._v("要注意全局变量限制符只能为 const、attribute、uniform和varying中的一个.不可复合.")]),t._v(" "),a("h2",{attrs:{id:"函数参数限定符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数限定符"}},[t._v("#")]),t._v(" 函数参数限定符:")]),t._v(" "),a("p",[t._v("函数的参数默认是以拷贝的形式传递的,也就是值传递,任何传递给函数参数的变量,其值都会被复制一份,然后再交给函数内部进行处理.\n我们可以为参数添加限定符来达到传递引用的目的,glsl中提供的参数限定符如下:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("限定符")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("< none: default >")]),t._v(" "),a("td",[t._v("默认使用 in 限定符")])]),t._v(" "),a("tr",[a("td",[t._v("in")]),t._v(" "),a("td",[t._v("复制到函数中在函数中可读写")])]),t._v(" "),a("tr",[a("td",[t._v("out")]),t._v(" "),a("td",[t._v("返回时从函数中复制出来")])]),t._v(" "),a("tr",[a("td",[t._v("inout")]),t._v(" "),a("td",[t._v("复制到函数中并在返回时复制出来")])])])]),t._v(" "),a("p",[a("code",[t._v("in")]),t._v(" 是函数参数的默认限定符,最终真正传入函数形参的其实是实参的一份拷贝.在函数中,修改in修饰的形参不会影响到实参变量本身.")]),t._v(" "),a("p",[a("code",[t._v("out")]),t._v(' 它的作用是向函数外部传递新值,out模式下传递进来的参数是write-only的(可写不可读).就像是一个"坑位",坑位中的值需要函数给他赋予.\n在函数中,修改out修饰的形参会影响到实参本身.')]),t._v(" "),a("p",[a("code",[t._v("inout")]),t._v(' inout下,形参可以被理解为是一个带值的"坑位",及可读也可写,在函数中,修改inout修饰的形参会影响到实参本身.')]),t._v(" "),a("h2",{attrs:{id:"glsl的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#glsl的函数"}},[t._v("#")]),t._v(" glsl的函数:")]),t._v(" "),a("p",[t._v("glsl允许在程序的最外部声明函数.函数不能嵌套,不能递归调用,且必须声明返回值类型(无返回值时声明为void) 在其他方面glsl函数与c函数非常类似.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPosition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    vec4 v4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" v4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doubleSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inout "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" psize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doubleSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("psize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    gl_Position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPosition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    gl_PointSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" psize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数:")]),t._v(" "),a("p",[t._v("glsl中变量可以在声明的时候初始化,"),a("code",[t._v("float pSize = 10.0")]),t._v(" 也可以先声明然后等需要的时候在进行赋值.")]),t._v(" "),a("p",[t._v("聚合类型对象如(向量,矩阵,数组,结构) 需要使用其构造函数来进行初始化. "),a("code",[t._v("vec4 color = vec4(0.0, 1.0, 0.0, 1.0);")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一般类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" pSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" pSize1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npSize1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//复合类型")]),t._v("\nvec4 color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 color1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncolor1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结构")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("light")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" intensity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    vec3 position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlight lightVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("light")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换:")]),t._v(" "),a("p",[t._v("glsl可以使用构造函数进行显式类型转换,各值如下:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true转换为1或1.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false转换为0或0.0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" b1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0或0.0转换为false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//非0转换为true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" d1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"精度限定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精度限定"}},[t._v("#")]),t._v(" 精度限定:")]),t._v(" "),a("p",[t._v("glsl在进行光栅化着色的时候,会产生大量的浮点数运算,这些运算可能是当前设备所不能承受的,所以glsl提供了3种浮点数精度,我们可以根据不同的设备来使用合适的精度.")]),t._v(" "),a("p",[t._v("在变量前面加上 "),a("code",[t._v("highp")]),t._v(" "),a("code",[t._v("mediump")]),t._v(" "),a("code",[t._v("lowp")]),t._v(" 即可完成对该变量的精度声明.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("lowp float color;\nvarying mediump vec2 Coord;\nlowp ivec2 foo(lowp mat3);\nhighp mat4 m;\n")])])]),a("p",[t._v("我们一般在片元着色器(fragment shader)最开始的地方加上 "),a("code",[t._v("precision mediump float;")]),t._v(" 便设定了默认的精度.这样所有没有显式表明精度的变量\n都会按照设定好的默认精度来处理.")]),t._v(" "),a("p",[a("strong",[t._v("如何确定精度:")])]),t._v(" "),a("p",[t._v("变量的精度首先是由精度限定符决定的,如果没有精度限定符,则要寻找其右侧表达式中,已经确定精度的变量,一旦找到,那么整个表达式都将在该精度下运行.如果找到多个,\n则选择精度较高的那种,如果一个都找不到,则使用默认或更大的精度类型.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("uniform highp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" h1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhighp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" h2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运算过程和结果都 是高精度")]),t._v("\nmediump "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" h1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" h2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运算过程 是高精度")]),t._v("\nh2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" h1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运算过程 是高精度")]),t._v("\nm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" h2 – h1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运算过程 是高精度")]),t._v("\nh2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//运算过程和结果都 是中等精度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("highp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 形参 p 是高精度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//传入的 3.3是高精度")]),t._v("\n\n\n")])])]),a("p",[a("strong",[t._v("invariant关键字:")])]),t._v(" "),a("p",[t._v("由于shader在编译时会进行一些内部优化,可能会导致同样的运算在不同shader里结果不一定精确相等.这会引起一些问题,尤其是vertx shader向fragmeng shader传值的时候.\n所以我们需要使用"),a("code",[t._v("invariant")]),t._v(" 关键字来显式要求计算结果必须精确一致. 当然我们也可使用 "),a("code",[t._v("#pragma STDGL invariant(all)")]),t._v("来命令所有输出变量必须精确一致,\n但这样会限制编译器优化程度,降低性能.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" STDGL invariant(all) ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//所有输出变量为 invariant")]),t._v("\ninvariant varying texCoord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//varying在传递数据的时候声明为invariant")]),t._v("\n\n")])])]),a("p",[a("strong",[t._v("限定符的顺序:")])]),t._v(" "),a("p",[t._v("当需要用到多个限定符的时候要遵循以下顺序:")]),t._v(" "),a("p",[t._v("1.在一般变量中: invariant > storage > precision")]),t._v(" "),a("p",[t._v("2.在参数中: storage > parameter > precision")]),t._v(" "),a("p",[t._v("我们来举例说明:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("invariant varying lowp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// invariant > storage > precision")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doubleSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" in lowp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//storage > parameter > precision")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"预编译指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预编译指令"}},[t._v("#")]),t._v(" 预编译指令:")]),t._v(" "),a("p",[t._v("以 # 开头的是预编译指令,常用的有:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("undef")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("else")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("elif")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("error")]),t._v(" #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("pragma")]),t._v(" #extension #version #"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("line")])]),t._v("\n")])])]),a("p",[t._v("比如 "),a("strong",[t._v("#version 100")]),t._v(" 他的意思是规定当前shader使用 GLSL ES 1.00标准进行编译,如果使用这条预编译指令,则他必须出现在程序的最开始位置.")]),t._v(" "),a("p",[a("strong",[t._v("内置的宏:")])]),t._v(" "),a("p",[a("code",[t._v("__LINE__")]),t._v(" : 当前源码中的行号.")]),t._v(" "),a("p",[a("code",[t._v("__VERSION__")]),t._v(" : 一个整数,指示当前的glsl版本 比如 100  ps: 100 = v1.00")]),t._v(" "),a("p",[a("code",[t._v("GL_ES")]),t._v(" : 如果当前是在 OPGL ES 环境中运行则 GL_ES 被设置成1,一般用来检查当前环境是不是 OPENGL ES.")]),t._v(" "),a("p",[a("code",[t._v("GL_FRAGMENT_PRECISION_HIGH")]),t._v(" : 如果当前系统glsl的片元着色器支持高浮点精度,则设置为1.一般用于检查着色器精度.")]),t._v(" "),a("p",[t._v("实例:")]),t._v(" "),a("p",[t._v("1.如何通过判断系统环境,来选择合适的精度:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" GL_ES ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifdef")]),t._v(" GL_FRAGMENT_PRECISION_HIGH")]),t._v("\nprecision highp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("else")])]),t._v("\nprecision mediump "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n\n")])])]),a("p",[t._v("2.自定义宏:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" NUM 100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" NUM==100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n")])])]),a("h2",{attrs:{id:"内置的特殊变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置的特殊变量"}},[t._v("#")]),t._v(" 内置的特殊变量")]),t._v(" "),a("p",[t._v("glsl程序使用一些特殊的内置变量与硬件进行沟通.他们大致分成两种 一种是 "),a("code",[t._v("input")]),t._v("类型,他负责向硬件(渲染管线)发送数据.\n另一种是"),a("code",[t._v("output")]),t._v("类型,负责向程序回传数据,以便编程时需要.")]),t._v(" "),a("p",[a("strong",[t._v("在 vertex Shader 中:")])]),t._v(" "),a("p",[t._v("output 类型的内置变量:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("变量")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("单位")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("highp vec4 "),a("code",[t._v("gl_Position")]),t._v(";")]),t._v(" "),a("td",[t._v("gl_Position 放置顶点坐标信息")]),t._v(" "),a("td",[t._v("vec4")])]),t._v(" "),a("tr",[a("td",[t._v("mediump float "),a("code",[t._v("gl_PointSize")]),t._v(";")]),t._v(" "),a("td",[t._v("gl_PointSize 需要绘制点的大小,(只在gl.POINTS模式下有效)")]),t._v(" "),a("td",[t._v("float")])])])]),t._v(" "),a("p",[a("strong",[t._v("在 fragment Shader 中:")])]),t._v(" "),a("p",[t._v("input 类型的内置变量:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("变量")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("单位")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("mediump vec4 "),a("code",[t._v("gl_FragCoord")]),t._v(";")]),t._v(" "),a("td",[t._v("片元在framebuffer画面的相对位置")]),t._v(" "),a("td",[t._v("vec4")])]),t._v(" "),a("tr",[a("td",[t._v("bool "),a("code",[t._v("gl_FrontFacing")]),t._v(";")]),t._v(" "),a("td",[t._v("标志当前图元是不是正面图元的一部分")]),t._v(" "),a("td",[t._v("bool")])]),t._v(" "),a("tr",[a("td",[t._v("mediump vec2 "),a("code",[t._v("gl_PointCoord")]),t._v(";")]),t._v(" "),a("td",[t._v("经过插值计算后的纹理坐标,点的范围是0.0到1.0")]),t._v(" "),a("td",[t._v("vec2")])])])]),t._v(" "),a("p",[t._v("output 类型的内置变量:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("变量")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("单位")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("mediump vec4 "),a("code",[t._v("gl_FragColor")]),t._v(";")]),t._v(" "),a("td",[t._v("设置当前片点的颜色")]),t._v(" "),a("td",[t._v("vec4 RGBA color")])]),t._v(" "),a("tr",[a("td",[t._v("mediump vec4 "),a("code",[t._v("gl_FragData[n]")])]),t._v(" "),a("td",[t._v("设置当前片点的颜色,使用glDrawBuffers数据数组")]),t._v(" "),a("td",[t._v("vec4 RGBA color")])])])]),t._v(" "),a("h2",{attrs:{id:"内置的常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置的常量"}},[t._v("#")]),t._v(" 内置的常量")]),t._v(" "),a("p",[t._v("glsl提供了一些内置的常量,用来说明当前系统的一些特性. 有时我们需要针对这些特性,对shader程序进行优化,让程序兼容度更好.")]),t._v(" "),a("p",[a("strong",[t._v("在 vertex Shader 中:")])]),t._v(" "),a("p",[t._v("1.const mediump int "),a("code",[t._v("gl_MaxVertexAttribs")]),t._v(">=8")]),t._v(" "),a("p",[t._v("gl_MaxVertexAttribs 表示在vertex shader(顶点着色器)中可用的最大attributes数.这个值的大小取决于 OpenGL ES 在某设备上的具体实现,\n不过最低不能小于 8 个.")]),t._v(" "),a("p",[t._v("2.const mediump int "),a("code",[t._v("gl_MaxVertexUniformVectors")]),t._v(" >= 128")]),t._v(" "),a("p",[t._v("gl_MaxVertexUniformVectors 表示在vertex shader(顶点着色器)中可用的最大uniform vectors数. 这个值的大小取决于 OpenGL ES 在某设备上的具体实现,\n不过最低不能小于 128 个.")]),t._v(" "),a("p",[t._v("3.const mediump int "),a("code",[t._v("gl_MaxVaryingVectors")]),t._v(" >= 8")]),t._v(" "),a("p",[t._v("gl_MaxVaryingVectors 表示在vertex shader(顶点着色器)中可用的最大varying vectors数. 这个值的大小取决于 OpenGL ES 在某设备上的具体实现,\n不过最低不能小于 8 个.")]),t._v(" "),a("p",[t._v("4.const mediump int "),a("code",[t._v("gl_MaxVertexTextureImageUnits")]),t._v(" >= 0")]),t._v(" "),a("p",[t._v("gl_MaxVaryingVectors 表示在vertex shader(顶点着色器)中可用的最大纹理单元数(贴图). 这个值的大小取决于 OpenGL ES 在某设备上的具体实现,\n甚至可以一个都没有(无法获取顶点纹理)")]),t._v(" "),a("p",[t._v("5.const mediump int "),a("code",[t._v("gl_MaxCombinedTextureImageUnits")]),t._v(" >= 8")]),t._v(" "),a("p",[t._v("gl_MaxVaryingVectors 表示在 vertex Shader和fragment Shader总共最多支持多少个纹理单元. 这个值的大小取决于 OpenGL ES 在某设备上的具体实现,\n不过最低不能小于 8 个.")]),t._v(" "),a("p",[a("strong",[t._v("在 fragment Shader 中:")])]),t._v(" "),a("p",[t._v("1.const mediump int "),a("code",[t._v("gl_MaxTextureImageUnits")]),t._v(" >= 8")]),t._v(" "),a("p",[t._v("gl_MaxVaryingVectors 表示在 fragment Shader(片元着色器)中能访问的最大纹理单元数,这个值的大小取决于 OpenGL ES 在某设备上的具体实现,\n不过最低不能小于 8 个.")]),t._v(" "),a("p",[t._v("2.const mediump int "),a("code",[t._v("gl_MaxFragmentUniformVectors")]),t._v(" >= 16")]),t._v(" "),a("p",[t._v("gl_MaxFragmentUniformVectors 表示在 fragment Shader(片元着色器)中可用的最大uniform vectors数,这个值的大小取决于 OpenGL ES 在某设备上的具体实现,\n不过最低不能小于 16 个.")]),t._v(" "),a("p",[t._v("3.const mediump int "),a("code",[t._v("gl_MaxDrawBuffers")]),t._v(" = 1")]),t._v(" "),a("p",[t._v("gl_MaxDrawBuffers 表示可用的drawBuffers数,在OpenGL ES 2.0中这个值为1, 在将来的版本可能会有所变化.")]),t._v(" "),a("p",[t._v("glsl中还有一种内置的uniform状态变量, "),a("code",[t._v("gl_DepthRange")]),t._v(" 它用来表明全局深度范围.")]),t._v(" "),a("p",[t._v("结构如下:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("gl_DepthRangeParameters")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n highp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" near"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// n")]),t._v("\n highp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" far"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f")]),t._v("\n highp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" diff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f - n")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n uniform gl_DepthRangeParameters gl_DepthRange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("除了 gl_DepthRange 外的所有uniform状态常量都已在glsl 1.30 中"),a("code",[t._v("废弃")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"流控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流控制"}},[t._v("#")]),t._v(" 流控制")]),t._v(" "),a("p",[t._v("glsl的流控制和c语言非常相似,这里不必再做过多说明,唯一不同的是片段着色器中有一种特殊的控制流"),a("code",[t._v("discard")]),t._v(".\n使用discard会退出片段着色器，不执行后面的片段着色操作。片段也不会写入帧缓冲区。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" numLights"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lightExists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" light"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" light"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lightNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    lightNum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lightNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    discard"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n")])])]),a("h2",{attrs:{id:"内置函数库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置函数库"}},[t._v("#")]),t._v(" 内置函数库")]),t._v(" "),a("p",[t._v("glsl提供了非常丰富的函数库,供我们使用,这些功能都是非常有用且会经常用到的. 这些函数按功能区分大改可以分成7类:")]),t._v(" "),a("p",[a("strong",[t._v("通用函数:")])]),t._v(" "),a("p",[t._v("下文中的 类型 T可以是 float, vec2, vec3, vec4,且可以逐分量操作.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("T abs(T x)")]),t._v(" "),a("td",[t._v("返回x的绝对值")])]),t._v(" "),a("tr",[a("td",[t._v("T sign(T x)")]),t._v(" "),a("td",[t._v("比较x与0的值,大于,等于,小于 分别返回 1.0 ,0.0,-1.0")])]),t._v(" "),a("tr",[a("td",[t._v("T floor(T x)")]),t._v(" "),a("td",[t._v("返回<=x的最大整数")])]),t._v(" "),a("tr",[a("td",[t._v("T ceil(T x)")]),t._v(" "),a("td",[t._v("返回>=等于x的最小整数")])]),t._v(" "),a("tr",[a("td",[t._v("T fract(T x)")]),t._v(" "),a("td",[t._v("获取x的小数部分")])]),t._v(" "),a("tr",[a("td",[t._v("T mod(T x, T y) "),a("br"),t._v(" T mod(T x, float y)")]),t._v(" "),a("td",[t._v("取x,y的余数")])]),t._v(" "),a("tr",[a("td",[t._v("T min(T x, T y) "),a("br"),t._v(" T min(T x, float y)")]),t._v(" "),a("td",[t._v("取x,y的最小值")])]),t._v(" "),a("tr",[a("td",[t._v("T max(T x, T y) "),a("br"),t._v(" T max(T x, float y)")]),t._v(" "),a("td",[t._v("取x,y的最大值")])]),t._v(" "),a("tr",[a("td",[t._v("T clamp(T x, T minVal, T maxVal) "),a("br"),t._v("T clamp(T x, float minVal,float maxVal)")]),t._v(" "),a("td",[t._v("min(max(x, minVal), maxVal),返回值被限定在 minVal,maxVal之间")])]),t._v(" "),a("tr",[a("td",[t._v("T mix(T x, T y, T a) "),a("br"),t._v("  T mix(T x, T y, float a)")]),t._v(" "),a("td",[t._v("取x,y的线性混合,x*(1-a)+y*a")])]),t._v(" "),a("tr",[a("td",[t._v("T step(T edge, T x)  "),a("br"),t._v(" T step(float edge, T x)")]),t._v(" "),a("td",[t._v("如果 x<edge 返回 0.0 否则返回1.0")])]),t._v(" "),a("tr",[a("td",[t._v("T smoothstep(T edge0, T edge1, T x) "),a("br"),t._v(" T smoothstep(float edge0,float edge1, T x)")]),t._v(" "),a("td",[t._v("如果x<edge0 返回 0.0 如果x>edge1返回1.0, 否则返回Hermite插值")])])])]),t._v(" "),a("p",[a("strong",[t._v("角度&三角函数:")])]),t._v(" "),a("p",[t._v("下文中的 类型 T可以是 float, vec2, vec3, vec4,且可以逐分量操作.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("T radians(T degrees)")]),t._v(" "),a("td",[t._v("角度转弧度")])]),t._v(" "),a("tr",[a("td",[t._v("T degrees(T radians)")]),t._v(" "),a("td",[t._v("弧度转角度")])]),t._v(" "),a("tr",[a("td",[t._v("T sin(T angle)")]),t._v(" "),a("td",[t._v("正弦函数,角度是弧度")])]),t._v(" "),a("tr",[a("td",[t._v("T cos(T angle)")]),t._v(" "),a("td",[t._v("余弦函数,角度是弧度")])]),t._v(" "),a("tr",[a("td",[t._v("T tan(T angle)")]),t._v(" "),a("td",[t._v("正切函数,角度是弧度")])]),t._v(" "),a("tr",[a("td",[t._v("T asin(T x)")]),t._v(" "),a("td",[t._v("反正弦函数,返回值是弧度")])]),t._v(" "),a("tr",[a("td",[t._v("T acos(T x)")]),t._v(" "),a("td",[t._v("反余弦函数,返回值是弧度")])]),t._v(" "),a("tr",[a("td",[t._v("T atan(T y, T x)"),a("br"),t._v("  T atan(T y_over_x)")]),t._v(" "),a("td",[t._v("反正切函数,返回值是弧度")])])])]),t._v(" "),a("p",[a("strong",[t._v("指数函数:")])]),t._v(" "),a("p",[t._v("下文中的 类型 T可以是 float, vec2, vec3, vec4,且可以逐分量操作.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("T pow(T x, T y)")]),t._v(" "),a("td",[t._v("返回x的y次幂 x"),a("sub",[t._v("y")])])]),t._v(" "),a("tr",[a("td",[t._v("T exp(T x)")]),t._v(" "),a("td",[t._v("返回x的自然指数幂 e"),a("sub",[t._v("x")])])]),t._v(" "),a("tr",[a("td",[t._v("T log(T x)")]),t._v(" "),a("td",[t._v("返回x的自然对数 ln")])]),t._v(" "),a("tr",[a("td",[t._v("T exp2(T x)")]),t._v(" "),a("td",[t._v("返回2的x次幂 2"),a("sub",[t._v("x")])])]),t._v(" "),a("tr",[a("td",[t._v("T log2(T x)")]),t._v(" "),a("td",[t._v("返回2为底的对数 log2")])]),t._v(" "),a("tr",[a("td",[t._v("T sqrt(T x)")]),t._v(" "),a("td",[t._v("开根号 √x")])]),t._v(" "),a("tr",[a("td",[t._v("T inversesqrt(T x)")]),t._v(" "),a("td",[t._v("先开根号,在取倒数,就是 1/√x")])])])]),t._v(" "),a("p",[a("strong",[t._v("几何函数:")])]),t._v(" "),a("p",[t._v("下文中的 类型 T可以是 float, vec2, vec3, vec4,且可以逐分量操作.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("float length(T x)")]),t._v(" "),a("td",[t._v("返回矢量x的长度")])]),t._v(" "),a("tr",[a("td",[t._v("float distance(T p0, T p1)")]),t._v(" "),a("td",[t._v("返回p0  p1两点的距离")])]),t._v(" "),a("tr",[a("td",[t._v("float dot(T x, T y)")]),t._v(" "),a("td",[t._v("返回x y的点积")])]),t._v(" "),a("tr",[a("td",[t._v("vec3 cross(vec3 x, vec3 y)")]),t._v(" "),a("td",[t._v("返回x y的叉积")])]),t._v(" "),a("tr",[a("td",[t._v("T normalize(T x)")]),t._v(" "),a("td",[t._v("对x进行归一化,保持向量方向不变但长度变为1")])]),t._v(" "),a("tr",[a("td",[t._v("T faceforward(T N, T I, T Nref)")]),t._v(" "),a("td",[t._v("根据 矢量 N 与Nref 调整法向量")])]),t._v(" "),a("tr",[a("td",[t._v("T reflect(T I, T N)")]),t._v(" "),a("td",[t._v("返回 I - 2 * dot(N,I) * N, 结果是入射矢量 I 关于法向量N的 镜面反射矢量")])]),t._v(" "),a("tr",[a("td",[t._v("T refract(T I, T N, float eta)")]),t._v(" "),a("td",[t._v("返回入射矢量I关于法向量N的折射矢量,折射率为eta")])])])]),t._v(" "),a("p",[a("strong",[t._v("矩阵函数:")])]),t._v(" "),a("p",[t._v("mat可以为任意类型矩阵.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("mat matrixCompMult(mat x, mat y)")]),t._v(" "),a("td",[t._v("将矩阵 x 和 y的元素逐分量相乘")])])])]),t._v(" "),a("p",[a("strong",[t._v("向量函数:")])]),t._v(" "),a("p",[t._v("下文中的 类型 T可以是 vec2, vec3, vec4, 且可以逐分量操作.")]),t._v(" "),a("p",[t._v("bvec指的是由bool类型组成的一个向量:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec3 v3"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec3 v3_1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbvec3 aa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lessThan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v3_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//bvec3(true,true,true)")]),t._v("\n\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("bvec lessThan(T x, T y)")]),t._v(" "),a("td",[t._v("逐分量比较x < y,将结果写入bvec对应位置")])]),t._v(" "),a("tr",[a("td",[t._v("bvec lessThanEqual(T x, T y)")]),t._v(" "),a("td",[t._v("逐分量比较 x <= y,将结果写入bvec对应位置")])]),t._v(" "),a("tr",[a("td",[t._v("bvec  greaterThan(T x, T y)")]),t._v(" "),a("td",[t._v("逐分量比较 x > y,将结果写入bvec对应位置")])]),t._v(" "),a("tr",[a("td",[t._v("bvec greaterThanEqual(T x, T y)")]),t._v(" "),a("td",[t._v("逐分量比较  x >= y,将结果写入bvec对应位置")])]),t._v(" "),a("tr",[a("td",[t._v("bvec equal(T x, T y) "),a("br"),t._v(" bvec equal(bvec x, bvec y)")]),t._v(" "),a("td",[t._v("逐分量比较 x == y,将结果写入bvec对应位置")])]),t._v(" "),a("tr",[a("td",[t._v("bvec notEqual(T x, T y) "),a("br"),t._v(" bvec notEqual(bvec x, bvec y)")]),t._v(" "),a("td",[t._v("逐分量比较 x!= y,将结果写入bvec对应位置")])]),t._v(" "),a("tr",[a("td",[t._v("bool any(bvec x)")]),t._v(" "),a("td",[t._v("如果x的任意一个分量是true,则结果为true")])]),t._v(" "),a("tr",[a("td",[t._v("bool all(bvec x)")]),t._v(" "),a("td",[t._v("如果x的所有分量是true,则结果为true")])]),t._v(" "),a("tr",[a("td",[t._v("bvec not(bvec x)")]),t._v(" "),a("td",[t._v("bool矢量的逐分量取反")])])])]),t._v(" "),a("p",[a("strong",[t._v("纹理查询函数:")])]),t._v(" "),a("p",[t._v("图像纹理有两种 一种是平面2d纹理,另一种是盒纹理,针对不同的纹理类型有不同访问方法.")]),t._v(" "),a("p",[t._v("纹理查询的最终目的是从sampler中提取指定坐标的颜色信息. 函数中带有Cube字样的是指 需要传入盒状纹理. 带有Proj字样的是指带投影的版本.")]),t._v(" "),a("p",[t._v("以下函数只在vertex shader中可用:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2DLod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec2 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" lod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2DProjLod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec3 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" lod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2DProjLod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec4 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" lod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("textureCubeLod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("samplerCube sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec3 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" lod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("以下函数只在fragment shader中可用:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec2 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" bias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2DProj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec3 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" bias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2DProj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec4 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" bias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("textureCube")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("samplerCube sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec3 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" bias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在 vertex shader 与 fragment shader 中都可用:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec2 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2DProj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec3 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2DProj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampler2D sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec4 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvec4 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("textureCube")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("samplerCube sampler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vec3 coord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"官方的shader范例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#官方的shader范例"}},[t._v("#")]),t._v(" 官方的shader范例:")]),t._v(" "),a("p",[t._v("下面的shader如果你可以一眼看懂,说明你已经对glsl语言基本掌握了.")]),t._v(" "),a("p",[a("strong",[t._v("Vertex Shader:")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("uniform mat4 mvp_matrix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//透视矩阵 * 视图矩阵 * 模型变换矩阵")]),t._v("\nuniform mat3 normal_matrix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//法线变换矩阵(用于物体变换后法线跟着变换)")]),t._v("\nuniform vec3 ec_light_dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//光照方向")]),t._v("\nattribute vec4 a_vertex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顶点坐标")]),t._v("\nattribute vec3 a_normal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//顶点法线")]),t._v("\nattribute vec2 a_texcoord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//纹理坐标")]),t._v("\nvarying "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" v_diffuse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//法线与入射光的夹角")]),t._v("\nvarying vec2 v_texcoord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2d纹理坐标")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//归一化法线")]),t._v("\n vec3 ec_normal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("normalize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("normal_matrix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a_normal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//v_diffuse 是法线与光照的夹角.根据向量点乘法则,当两向量长度为1是 乘积即cosθ值")]),t._v("\n v_diffuse "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dot")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ec_light_dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ec_normal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n v_texcoord "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a_texcoord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n gl_Position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mvp_matrix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a_vertex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Fragment Shader:")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("precision mediump "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuniform sampler2D t_reflectance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuniform vec4 i_ambient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvarying "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" v_diffuse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvarying vec2 v_texcoord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n vec4 color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("texture2D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t_reflectance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v_texcoord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里分解开来是 color*vec3(1,1,1)*v_diffuse + color*i_ambient")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//色*光*夹角cos + 色*环境光")]),t._v("\n gl_FragColor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v_diffuse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i_ambient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);