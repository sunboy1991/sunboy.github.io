(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{539:function(e,t,a){"use strict";a.r(t);var n=a(27),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"spa重要的伙伴-router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spa重要的伙伴-router"}},[e._v("#")]),e._v(" SPA重要的伙伴-Router")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("vue-router")]),e._v(" 的使用可能在MPA项目中并不多见的，但是对于SPA项目中是一个比较重要的部分，它和 "),a("code",[e._v("Vue.js")]),e._v(" 的核心深度集成，让构建单页面应用变得更为容易。")])]),e._v(" "),a("ul",[a("li",[e._v("响应路由参数变化")]),e._v(" "),a("li",[e._v("如何对router进行劫持")]),e._v(" "),a("li",[e._v("路由的懒加载")]),e._v(" "),a("li",[e._v("History模式和404")])]),e._v(" "),a("h3",{attrs:{id:"响应路由参数变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应路由参数变化"}},[e._v("#")]),e._v(" 响应路由参数变化")]),e._v(" "),a("p",[e._v("有时我们在开发过程中，可能会复用同一个页面，比如文章、订单等，这时我们就需要使用"),a("code",[e._v("动态路径参数")]),e._v("来区分页面，已达到多个页面的效果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default [\n    // 动态路径参数 以冒号开头\n    {\n        path: '/order/:id', \n        component: Order,\n    }\n]\n")])])]),a("p",[e._v("对于"),a("code",[e._v("路径参数")]),e._v("，其参数值将会被设置到 "),a("code",[e._v("this.$route.params")]),e._v(" ，当我们在页面时，可以使用"),a("code",[e._v("this.$route.params.<name>")]),e._v(" 的方式进行获取。")]),e._v(" "),a("p",[e._v("而由于使用路由参数，原来的组件实例会被复用，所以当"),a("code",[e._v("路径参数")]),e._v("发生变化时，页面是不会重新刷新的，这时我们就需要进行监听路由的变化。")]),e._v(" "),a("p",[e._v("虽然页面没有刷新，但是 "),a("code",[e._v("this.$route.params")]),e._v(" 的参数值还是发生了变化的，所以我们可以通过监听 "),a("code",[e._v("$route")]),e._v(" 来响应：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default {\n    watch: {\n        '$route' (to, from) {\n            //...\n        }\n    }\n}\n")])])]),a("p",[e._v("或者通过监听 "),a("code",[e._v("beforeRouteUpdate")]),e._v(" 来响应：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default {\n    beforeRouteUpdate (to, from, next) {\n        //...\n    }\n\n}\n")])])]),a("h3",{attrs:{id:"如何对router进行劫持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何对router进行劫持"}},[e._v("#")]),e._v(" 如何对router进行劫持")]),e._v(" "),a("p",[e._v("有时我们使用vue-router构建单页面时，用户可能没有页面权限或其他原因，这时我们就需要对路由进行拦截，让用户重定向到指定的页面。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 路由钩子\nrouter.beforeEach(({ meta, path }, from, next) => {\n    //进入登录或注册页面\n    if (path == "/login" || path == "/reg") {\n        if (isLogin) {\n            //如果用户已登录，则跳转到用户页面\n            return next({ path: "/admin" });\n        }  \n    } \n    //进入需要用户权限的页面\n    else if (true === meta.auth) {\n        if (!isLogin) {\n            //如果用户未登录，则跳转到登录页面\n            return next({ path: "/login" });\n        }\n    }\n    next();\n});\n')])])]),a("h3",{attrs:{id:"路由的懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由的懒加载"}},[e._v("#")]),e._v(" 路由的懒加载")]),e._v(" "),a("p",[e._v("这里与前面组件道理是一样的，由于SPA项目在进行路由配置时需要载入各个页面组件，如果没有应用懒加载，则 "),a("code",[e._v("webpack")]),e._v(" 打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，时间也过长之类的问题，所以我们运用懒加载可以有效的将页面进行划分，在需要时才进行加载页面，减少首页加载的用时，写法如下：")]),e._v(" "),a("p",[e._v("懒加载的写法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('export default [\n    {\n        path: "/home",\n        component: resolve => require(["@/views/Home"], resolve),\n    },\n    {\n        path: "/about",\n        component: resolve => require(["@/views/About"], resolve),\n    },\n    {\n        path: "/admin",\n        component: resolve => require(["@/views/Admin"], resolve),\n    },\n    //...\n];\n')])])]),a("p",[e._v("非懒加载的写法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import Home from "@/views/Home";\nimport About from "@/views/About";\nimport Admin from "@/views/Admin";\n\nexport default [\n    {\n        path: "/home",\n        component: Home,\n    },\n    {\n        path: "/about",\n        component: About,\n    },\n    {\n        path: "/admin",\n        component: Admin,\n    },\n    //...\n];\n')])])]),a("h3",{attrs:{id:"history模式和404"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#history模式和404"}},[e._v("#")]),e._v(" *History模式和404")]),e._v(" "),a("p",[a("code",[e._v("vue-router")]),e._v(" 默认是使用 "),a("code",[e._v("hash")]),e._v(" 模式，使用 URL 的 "),a("code",[e._v("hash")]),e._v(" 来模拟一个完整的 URL，如果不想使用 "),a("code",[e._v("hash")]),e._v(" 的话，可以使用路由的 "),a("code",[e._v("history")]),e._v(" 模式，这种模式通过 "),a("code",[e._v("history.pushState")]),e._v(" 来完成 URL 的跳转而不需要重新加载页面。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    http://blog.hsuna.com/#article/5b3b2e5eb77bde617ca41666\n\n    =>\n\n    http://blog.hsuna.com/article/5b3b2e5eb77bde617ca41666\n")])])]),a("p",[e._v("然而使用 "),a("code",[e._v("history")]),e._v(" 模式的话，由于所有 URL 都是虚拟路径，所以发布到服务器时，我们则需要配置服务器，将所有访问 URL 指向到 "),a("code",[e._v("index.html")]),e._v("，例如")]),e._v(" "),a("p",[e._v("nginx：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("location / {\n  try_files $uri $uri/ /index.html;\n}\n")])])]),a("p",[e._v("由于URL全部被指向到该html文件，即使是不存在的URL也会被指向，所以我们需要在 "),a("code",[e._v("router")]),e._v(" 上进行通配配置，将不存在的页面指向到404页面上。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default [\n    //... \n    { \n        path: '*',\n        component: resolve => require([\"@/views/404\"], resolve),\n    }\n]\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);